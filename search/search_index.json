{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mongotoy","text":"<p> Async ODM for MongoDB. </p> <p> </p> <p> Mongotoy is a comprehensive asynchronous Object-Document Mapper (ODM) designed to simplify interactions with MongoDB databases in Python applications. Leveraging the Motor asynchronous MongoDB driver, Mongotoy seamlessly integrates asynchronous programming with MongoDB, providing developers with a powerful toolset for building high-performance applications. This integration allows for efficient communication with MongoDB databases, ensuring optimal scalability and responsiveness. With Mongotoy, developers can harness the full potential of MongoDB's features while enjoying the benefits of asynchronous programming, making it an ideal choice for modern, data-driven applications </p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Asynchronous Power: Mongotoy leverages the asynchronous paradigm of Python, enabling efficient management of I/O operations for optimal performance and responsiveness in applications.</p> </li> <li> <p>Based on Motor Driver: Mongotoy is built on top of the asynchronous Motor MongoDB driver, ensuring seamless integration with asynchronous Python applications. </p> </li> <li> <p>Schemaless Flexibility: With a schemaless design, Mongotoy empowers developers to work with MongoDB databases without rigid schemas, adapting to evolving data models effortlessly.</p> </li> <li> <p>Intuitive API: Mongotoy features an elegant and straightforward API facilitating common database operations.</p> </li> <li> <p>Flexible Configuration Options: Mongotoy offers extensive configuration options at both the database and document levels, enabling fine-tuning of MongoDB interactions for optimal performance and reliability.</p> </li> <li> <p>Custom Data Types Support: Mongotoy simplifies handling of custom data types and allows defining new types through Data Mapper classes, enhancing data integrity and consistency.</p> </li> <li> <p>Object-Document Mapping: Simplifying MongoDB document manipulation, Mongotoy maps Python objects to MongoDB documents seamlessly, enabling intuitive and object-oriented interactions.</p> </li> <li> <p>Document Serialization: Mongotoy supports serialization of documents into JSON, BSON, or Python dictionaries, enabling seamless integration with different parts of an application stack.</p> </li> <li> <p>Document Inheritance Support: Mongotoy provides robust support for document inheritance, enabling the creation of hierarchical data models and promoting code reuse and maintainability.</p> </li> <li> <p>Python Type Hint Support: Mongotoy allows developers to define document fields using Python type hints, enhancing code readability and enabling type checking.</p> </li> <li> <p>Relationship Management: Simplifying relationship management between documents, Mongotoy offers robust support for references and embedded documents, automating insertions, deletions, and updates.</p> </li> <li> <p>Automatic Operation Handling: Mongotoy automates insertion and deletion management, ensuring data integrity and consistency across related documents.</p> </li> <li> <p>Query Building: Mongotoy provides a powerful query building interface for constructing complex queries using Pythonic syntax.</p> </li> <li> <p>Index Management: Mongotoy simplifies the management of database indexes, optimizing query performance for efficient data retrieval.</p> </li> <li> <p>Transactions: Supporting MongoDB transactions, Mongotoy ensures data consistency and atomicity across multiple operations within a single transactional context.</p> </li> <li> <p>Geospatial Data Support: Mongotoy offers robust support for geospatial data types, facilitating storage, querying, and spatial analysis.</p> </li> <li> <p>Database Seeding Management: With built-in support for database seeding, Mongotoy streamlines the initialization of databases with predefined data sets, enhancing developer productivity.</p> </li> <li> <p>Support for Capped Collections: Mongotoy natively supports capped collections in MongoDB, ideal for scenarios requiring fixed-size, ordered datasets.</p> </li> <li> <p>Time Series Collections Management: Mongotoy provides robust support for managing time series data in MongoDB, optimized for storing and querying time-stamped data points.</p> </li> <li> <p>GridFS File Handling: Mongotoy seamlessly integrates with MongoDB's GridFS storage system for efficient handling of large files, offering a high-level interface for file management within MongoDB.</p> </li> </ul>"},{"location":"#minimal-example","title":"Minimal Example","text":"<p>Let's begin with a minimal example by defining a document and performing CRUD operations on the database.</p> <pre><code>import asyncio\nfrom mongotoy import Document, Engine\nimport datetime\n\n\nclass Person(Document):\n    name: str\n    last_name: str\n    dob: datetime.date\n\n\n# Create database engine\ndb = Engine('test-db')\n\n\nasync def main():\n    # Create a new Person instance\n    person = Person(\n        name='John',\n        last_name='Doe',\n        dob=datetime.date(1990, 12, 25)\n    )    \n\n    # Connect to the MongoDB database\n    await db.connect('mongodb://localhost:27017')\n\n    # Open a database session\n    async with db.session() as session:\n\n        # Save the person to the database\n        await session.save(person)\n\n        # Fetch all persons from database\n        async for c in session.objects(Person):\n            print(c.dump_dict())\n\n        # Update person dob\n        person.dob=datetime.date(1995, 10, 25)\n        await session.save(person)\n\n        # Delete person from database\n        await session.delete(person)\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"#installing","title":"Installing","text":"<p>To install, just run:  <pre><code>pip install mongotoy\n</code></pre></p> <p>Or, if using poetry:</p> <pre><code>poetry add mongotoy\n</code></pre> <p>Some title</p> <p>Some content</p> <p>Some title</p> <p>Some content</p> <p>Danger</p> <p>Some content</p> <p></p>"}]}